<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>WFortin</title>
 <link href="http://wfortin.github.io/atom.xml" rel="self"/>
 <link href="http://wfortin.github.io/"/>
 <updated>2014-04-30T23:54:43-04:00</updated>
 <id>http://wfortin.github.io</id>
 <author>
   <name>William Fortin</name>
   <email></email>
 </author>

 
 <entry>
   <title>Automate Your Application Development</title>
   <link href="http://wfortin.github.io/blog/Automate-Your-Development"/>
   <updated>2014-04-30T00:00:00-04:00</updated>
   <id>http://wfortin.github.io/blog/Automate-Your-Development</id>
   <content type="html">&lt;p&gt;Take the time to setup a build process for your new project, you will see the benifits instantly. I’ve recently experimented with &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Apcache Ant&lt;/a&gt; which is a widely known build automation software used mostly by the Java community. &lt;em&gt;I don’t like Ant&lt;/em&gt;. &lt;em&gt;I don’t like XML&lt;/em&gt;. Especially in a JavaScript project. Fortunately there are projects like &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; and &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; that are adapted to a JavaScript application stack.&lt;/p&gt;

&lt;h1 id=&quot;i-choose-gulp&quot;&gt;I choose Gulp&lt;/h1&gt;
&lt;p&gt;I’ve decided to write my apps with Gulp.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;code-over-configuration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That was the selling point. I just said that I don’t like XML. Even if Ant used JSON, it wouldn’t solve the problem at all. That’s pretty much what Grunt is to me, a bonified Ant version for JavaScript with a JSON configuration. On the other side, Gulp provides a more functional interface that you configure by code. Isn’t that what we do every day? And that’s what we’re good at!&lt;/p&gt;

&lt;h1 id=&quot;remove-the-pain-points-of-preprocessors&quot;&gt;Remove the pain points of preprocessors&lt;/h1&gt;
&lt;p&gt;I write my stylesheets in LESS. I write my scripts in TypeScript. If I had to fire up the console to compile each time I modified code, I’d probably go nuts (I actually started a big project this way, and lasted about 2 days).&lt;/p&gt;

&lt;p&gt;Preprocessors are awesome, they are less error prone and facilitate maintenance and refactorings, but they can be a pain if not automated. Fortunately, Gulp offers many included plugins for the mosts popular compiled languages and a &lt;strong&gt;**&lt;/strong&gt;load of third-party plugins are also available.&lt;/p&gt;

&lt;p&gt;Most build tools also offer a &lt;code&gt;watch&lt;/code&gt; task, that can monitor certain files or folders and run certain tasks.&lt;/p&gt;

&lt;h1 id=&quot;use-it&quot;&gt;Use it&lt;/h1&gt;
&lt;p&gt;Use it to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compile to JavaScript (&lt;a href=&quot;https://github.com/kotas/gulp-tsc&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://github.com/wearefractal/gulp-coffee&quot;&gt;CoffeeScript&lt;/a&gt;, etc.)&lt;/li&gt;
  &lt;li&gt;compile to CSS (&lt;a href=&quot;https://github.com/plus3network/gulp-less&quot;&gt;LESS&lt;/a&gt;, &lt;a href=&quot;https://github.com/dlmanning/gulp-sass&quot;&gt;SASS&lt;/a&gt;, &lt;a href=&quot;https://github.com/stevelacy/gulp-stylus&quot;&gt;Stylus&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/terinjokes/gulp-uglify&quot;&gt;minify&lt;/a&gt; files&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wearefractal/gulp-concat&quot;&gt;concatenate&lt;/a&gt; files&lt;/li&gt;
  &lt;li&gt;run tests&lt;/li&gt;
  &lt;li&gt;convert images to sprites stylesheets&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spenceralger/gulp-jshint&quot;&gt;lint&lt;/a&gt; and check for error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on. Each of these tasks can be invoked by a file change via the file watchers.&lt;/p&gt;

&lt;p&gt;On your next project (or current), take a little time to set up a build process. It shouldn’t take you long and you will be happy to use all those fancy preprocessors and compile-to-JS languages and watch your productivity increase exponentially!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="http://wfortin.github.io/blog/Hello-World"/>
   <updated>2013-06-03T00:00:00-04:00</updated>
   <id>http://wfortin.github.io/blog/Hello-World</id>
   <content type="html">&lt;p&gt;This is my first post, in my first blog. I’ve been wanting to do this for a long time. This blog will primarly be about programming and technology. I will try to leave the most information on Node.js, Heroku, CSS, UX/UI, JavaScript, Linux, Web Development or any cool stuff that I run into and find interesting to experiment with.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2014-04-30 : Side note, this blog is now hosted on github and uses Jekyll blog engine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s start right with this blog… I could have done it on wordpress or drupal but since i got into Node I don’t really want to go back to PHP programming. I found an interessting Node package for blogging easily : Poet. I’ve set up a running server on heroku and was done in about an hour.&lt;/p&gt;

&lt;p&gt;Here’s how I set up my blog.&lt;/p&gt;

&lt;p&gt;First follow the &lt;a href=&quot;http://jsantell.com/post/getting-started-with-poet&quot;&gt;tutorial from the maker of poet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We now want to host our blog on Heroku (for free!) so that other people can read it. There are little modifications to make. Here it goes :&lt;/p&gt;

&lt;p&gt;First, you need the set the &lt;code&gt;engines&lt;/code&gt; in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; should now look like this :&lt;/p&gt;
&lt;pre&gt;
{
  &quot;name&quot;: &quot;NameOfMyProject&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;engines&quot;: [&quot;node &amp;gt;= 0.6.12&quot;],
  &quot;private&quot; : true,
  &quot;main&quot;: &quot;server.js&quot;,
  &quot;dependencies&quot;:
  {
    &quot;poet&quot;    : &quot;&amp;gt;= 0.1.6&quot;,
    &quot;jade&quot;    : &quot;&amp;gt;= 0.20.3&quot;,
    &quot;express&quot; : &quot;&amp;gt;= 3.0.0rc5&quot;
  },
  &quot;engines&quot;:
  {
    &quot;node&quot;: &quot;0.8.x&quot;,
    &quot;npm&quot;: &quot;1.1.x&quot;
  }
}
&lt;/pre&gt;

&lt;p&gt;Next, you can’t use a hardcoded port on Heroku. Heroku will give you an open port when running your application. You will need to change your &lt;code&gt;server.js&lt;/code&gt; file.
Look for the line&lt;/p&gt;
&lt;pre&gt;
app.listen( 3000 );
&lt;/pre&gt;
&lt;p&gt;And change it to &lt;/p&gt;
&lt;pre&gt;
app.listen( process.env.PORT || 3000 );
&lt;/pre&gt;

&lt;p&gt;Next, you need to specify to Heroku wich process to run. Since we want to run &lt;code&gt;server.js&lt;/code&gt; on a web dyno, we’ll add a file named &lt;code&gt;Procfile&lt;/code&gt; and add the following command inside.&lt;/p&gt;
&lt;pre&gt;
web: node server.js
&lt;/pre&gt;

&lt;p&gt;Once these changes are made, we are ready to create our heroku app using the following commands :&lt;/p&gt;

&lt;pre&gt;
$ cd myappdirectory
$ git init
$ git commit -m &quot;First commit. Deploying on Heroku&quot;
&lt;/pre&gt;

&lt;pre&gt;
$ heroku create
&lt;/pre&gt;
&lt;p&gt;This will create your app with a randomly generated name (Don’t worry, you can change that in the settings).&lt;/p&gt;

&lt;pre&gt;
$ git push heroku master
&lt;/pre&gt;

&lt;p&gt;That’s it you now have a fully working blog running on Node.js and hosted on Heroku. If something went wrong refer to the &lt;a href=&quot;http://jsantell.github.com/poet/&quot;&gt;Poet Documentation&lt;/a&gt; or the &lt;a href=&quot;https://github.com/jsantell/poet&quot;&gt;Poet GitHub Repo&lt;/a&gt; and also the &lt;a href=&quot;https://devcenter.heroku.com/&quot;&gt;Heroku Developer Center documentation&lt;/a&gt; for Node.js&lt;/p&gt;
</content>
 </entry>
 

</feed>
